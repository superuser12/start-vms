---
- name: Deploy and configure Ubuntu cloud image on Hypervisor
  hosts: hypervisorserver
  become: yes
  gather_facts: no

  vars:
    image_url: "https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img"
    image_name: "noble-server-cloudimg-amd64.img"
    image_directory: "/var/lib/libvirt/images"
    #pass these variables as part of the command line argument
#    vm_name: "ceph-vm-01"
    #root_password
    vm_memory: "3072"
    vm_vcpus: "3"
    vm_bridge: "virbr0"
    image_size: "25G"
    expanded_image: "{{ vm_name }}-{{ image_size }}.qcow2"
    netplan_config: |  # Proper indentation for netplan
      network:
        version: 2
        renderer: networkd
        ethernets:
          default:
            match:
              # no quotes around en*
              name: en*
            dhcp4: true


  tasks:
    - name: Check if VM already exists on this host
      shell: "virsh list --all | grep -w '{{ vm_name }}'"
      register: vm_exists
      failed_when: false
      changed_when: false

    - name: Fail if VM is already present
      fail:
        msg: "VM {{ vm_name }} already exists on the host. Skipping deployment."
      when: vm_exists.rc == 0

    - name: Ensure /var/lib/libvirt/images directory exists
      file:
        path: "{{ image_directory }}"
        state: directory

    - name: Check if base image already exists
      stat:
        path: "{{ image_directory }}/{{ image_name }}"
      register: base_image

# will make this task a manual process
#    - name: Install libguestfs-tools (virt-customize) package
#      apt:
#        name: libguestfs-tools
#        state: present
#        update_cache: yes

    - name: Download the Ubuntu cloud image if not already present
      get_url:
        url: "{{ image_url }}"
        dest: "{{ image_directory }}/{{ image_name }}"
        mode: '0644'
      when: not base_image.stat.exists
      register: downloaded_image

    - name: Change the root password in the downloaded image
      command: >
        virt-customize -a {{ image_directory }}/{{ image_name }}
        --root-password password:{{ root_password }}
      args:
        chdir: "{{ image_directory }}"
      when: not base_image.stat.exists

    - name: Create SSH configuration
      template:
        src: templates/60-cloudimg-settings.conf.j2
        dest: /tmp/60-cloudimg-settings.conf
        mode: '0644'
      when: not base_image.stat.exists

    - name: Copy SSH config into image
      command: >
        virt-customize -a {{ image_directory }}/{{ image_name }}
        --copy-in /tmp/60-cloudimg-settings.conf:/etc/ssh/sshd_config.d/
      args:
        chdir: "{{ image_directory }}"
      tags: ['imageconfig']
      when: not base_image.stat.exists
    - name: Create netplan configuration
      template:
        src: templates/99-dhcp.yaml.j2
        dest: /tmp/99-dhcp.yaml
        mode: '0644'
      tags: ['imageconfig']
      when: not base_image.stat.exists

    - name: Copy netplan config into image
      command: >
        virt-customize -a {{ image_directory }}/{{ image_name }}
        --copy-in /tmp/99-dhcp.yaml:/etc/netplan/
      args:
        chdir: "{{ image_directory }}"
      tags: ['imageconfig']
      when: not base_image.stat.exists
    - name: Apply network and SSH configurations
      command: >
        virt-customize -a {{ image_directory }}/{{ image_name }}
        --run-command 'netplan generate && netplan apply'
        --run-command 'systemctl stop apparmor && systemctl disable apparmor'
        --run-command 'dpkg-reconfigure openssh-server && systemctl restart ssh'
      args:
        chdir: "{{ image_directory }}"
      tags: ['imageconfig']
      when: not base_image.stat.exists

    - name: Expand the qcow image to the specified size
      command: >
        qemu-img create -f qcow2 -F qcow2
        -b {{ image_directory }}/{{ image_name }}
        {{ image_directory }}/{{ expanded_image }} {{ image_size }}
      args:
        chdir: "{{ image_directory }}"

    - name: Start the VM using virt-install
      command: >
        virt-install
        --name {{ vm_name }}
        --memory {{ vm_memory }}
        --vcpus {{ vm_vcpus }}
        --import
        --disk path={{ image_directory }}/{{ expanded_image }},format=qcow2,bus=virtio
        --network bridge={{ vm_bridge }},model=virtio
        --graphics vnc,listen=0.0.0.0
        --osinfo ubuntu24.04
        --noautoconsole
      args:
        chdir: "{{ image_directory }}"
